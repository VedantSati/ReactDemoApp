{"version":3,"sources":["components/MessageForm.js","components/MyMessage.js","components/TheirMessage.js","components/ChatFeed.js","components/LoginForm.js","App.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","backgroundImage","avatar","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","title","keys","Object","key","lastMessageKey","width","marginLeft","renderMessages","height","LoginForm","setUsername","password","setPassword","error","setError","HandleSubmit","e","a","authObject","axios","get","headers","localStorage","setItem","window","location","reload","required","align","App","getItem","projectID","userSecret","renderChatFeed","chatAppProps","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.84d63352.chunk.js","sourcesContent":["import { set } from 'lodash';\r\nimport React from 'react'\r\nimport {useState } from 'react';\r\nimport {sendMessage, isTyping} from 'react-chat-engine';\r\nimport { SettingOutlined , PictureOutlined, SendOutlined } from '@ant-design/icons';\r\nconst MessageForm = (props) => {\r\n\r\nconst [value,setValue] = useState('');\r\nconst {chatId, creds} = props;\r\n\r\nconst handleSubmit = (event) =>{\r\nevent.preventDefault();//prevents the browser from not getting refe=reshed whn we send the message\r\nconst text = value.trim();\r\n\r\nif(text.length > 0) sendMessage(creds, chatId, { text });\r\nsetValue('');\r\n\r\n}\r\nconst handleChange = (event) =>{\r\n setValue(event.target.value);\r\n isTyping(props,chatId);\r\n\r\n\r\n\r\n}\r\nconst handleUpload = (event) =>{\r\n    sendMessage(creds,chatId, {files:event.target.files, text:''});\r\n\r\n}\r\n\r\n    return (\r\n        <form className=\"message-form\" onSubmit={handleSubmit}>\r\n            <input className=\"message-input\"\r\n            placeholder = \"Let Us Chat\"\r\n            value={value}\r\n            onChange={handleChange}\r\n            onSubmit={handleSubmit}\r\n\r\n            \r\n            \r\n            />\r\n            <label htmlFor=\"upload-button\">\r\n            <span className=\"image-button\">\r\n            <PictureOutlined className = \"picture-icon\" />\r\n            </span>\r\n\r\n            </label>\r\n            <input \r\n                type=\"file\"\r\n                multiple = {false}\r\n                id=\"upload-button\"\r\n                style={{display:'none'}}\r\n                onChange={handleUpload}\r\n\r\n            />\r\n    <button type=\"submit\" className=\"send-button\">\r\n        <SendOutlined className=\"send-icon\"/>\r\n    </button>\r\n\r\n\r\n        </form>\r\n    );\r\n}\r\nexport default MessageForm;\r\n","import React from 'react'\r\n\r\nconst  MyMessage = ({message}) => {\r\n    if(message?.attachments?.length>0)\r\n    {\r\n        //it means that the attcahed message is an image\r\n        return (\r\n            <img\r\n                src = {message.attachments[0].file}\r\n                alt =\"message-attachment\"\r\n                className=\"message-image\"\r\n                style={{float:'right'}}\r\n\r\n\r\n                />\r\n        )\r\n\r\n    }\r\n    \r\n    \r\n    return (\r\n        <div className=\"message\" style={{float:'right',marginRight:'18px',color:'Black',backgroundColor:\"#306EFF\"}}>\r\n            {message.text}\r\n           \r\n        </div>\r\n    );\r\n}\r\nexport default MyMessage;\r\n","import React from 'react'\r\n\r\nconst TheirMessage = ({lastMessage, message}) => {\r\n\r\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username != message.sender.username;\r\n    //this will return whether it is the first message that is being returned by the user\r\n\r\n    return (\r\n        <div className=\"message-row\">\r\n            {\r\n                isFirstMessageByUser && (\r\n                    <div className = \"message-avatar\" \r\n                    style={{backgroundImage: `url(${message?.sender?.avatar})`}}\r\n                    />\r\n                    )\r\n\r\n            }\r\n            \r\n                {   message?.attachments?.length>0\r\n                ? (\r\n                    //it means that the attcahed message is an image\r\n                     \r\n                        <img\r\n                            src = {message.attachments[0].file}\r\n                            alt =\"message-attachment\"\r\n                            className=\"message-image\"\r\n                            style={{float:'right'}}\r\n            \r\n            \r\n                            />\r\n                        ) : (\r\n                            <div className=\"message\" style={{float:'right',marginRight:'18px',color:'Black',backgroundColor:\"#306EFF\"}}>\r\n                                {message.text}\r\n           \r\n                             </div>\r\n                        )\r\n            \r\n            }\r\n        \r\n             \r\n            \r\n        </div>\r\n    );\r\n}\r\nexport default TheirMessage;\r\n","import { compose } from 'async';\r\nimport { isTyping } from 'react-chat-engine';\r\nimport MessageForm from './MessageForm';\r\nimport MyMessage from './MyMessage';\r\nimport TheirMessage from './TheirMessage';\r\n\r\n\r\nconst ChatFeed =(props)=>{\r\n    // the following lines of code means that we are destrcuturing some data from the props that is chat feeds here\r\n    const { chats, activeChat , userName, messages } =props;\r\n    //the following line means that if chat exis then find the chat and the active chat\r\n    const chat = chats && chats[activeChat];\r\n\r\n    // the following line of code means that we are getting the key tat is the message id and we are rendering te message sending process\r\n    // this component is used fir creating the messages \r\n    // the following fucntion checks who have read the messages\r\n    //the function will work only if the oersin has read the message\r\n    const renderReadReceipts = (message,isMyMessage) =>{\r\n     return  chat.people.map((person,index) =>person.last_read===message.id && (\r\n            \r\n            <div\r\n                key={`read_${index}`}\r\n                className=\"read-receipt\"\r\n                style={{\r\n                    float:isMyMessage?'right':'left',\r\n                    backgroundImage: `url(${person?.person?.avatar})`\r\n                }}\r\n\r\n\r\n                />\r\n\r\n        ))\r\n\r\n    }\r\n    const renderMessages = () =>{\r\n        const keys = Object.keys(messages);\r\n        //console.log(keys);\r\n        return keys.map((key, index)=>{\r\n            const message = messages[key];\r\n           //  in above line we take the message with the specific key\r\n           const lastMessageKey = index===0 ?null :keys[index-1];//this line means to return the last message if the index ==0 it means that their are no messages and we return null else return the index of the message\r\n\r\n           const isMyMessage = userName===message.sender.username;// this checks if the last message sent was by us or not\r\n\r\n           return (\r\n           //this msg_${index} assigns the value of the message woth the given index to the key\r\n            //  this is the meaning of the div with reciept classname this line means that if the last message was mine then while recieving the message we weill keep the message on right if mine else on the left if we recived the message \r\n            <div key = {`msg_${index}`} style={{width:'100%'}}>\r\n\r\n            <div className = \"message-block\">\r\n                {\r\n                    isMyMessage ? <MyMessage message = {message}/> : <TheirMessage message = {message} lastMessage = {messages[lastMessageKey]}/>\r\n\r\n                }\r\n\r\n\r\n            </div>\r\n            \r\n        \r\n            <div className = \"read-receipts\" style={{marginRight:isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px':'68px'}}>        \r\n            </div>\r\n\r\n            {\r\n                renderReadReceipts(message, isMyMessage)\r\n            }\r\n            </div>\r\n           )\r\n\r\n        })\r\n    }\r\n    \r\n   \r\n    //chat?.title checks that if we have chats already their or no if no then it wont reach till there as we have made a separate condition for the non exitance of chat which returns loading a a sring in cade it dienst exist\r\n   // renderMessages()\r\n   // this line is provdig the gap between the message and the block or form for sending message and i am sending it zero by defualt becuase messages sent should be at the last.\r\n    if(!chat) return \"Loading!......\";\r\nreturn (\r\n\r\n    <div className=\"chat-feed\">\r\n        <div className=\"chat-title-container\">\r\n            <div className=\"chat-title\">{chat?.title}</div>\r\n            <div className=\"chat-subtitle\">\r\n            {chat.people.map((person)=> ` ${person.person.username}`)}\r\n            </div>\r\n        </div>\r\n        {renderMessages()}\r\n        <div style = {{height:'100px'}} />\r\n        <div className=\"message-form-container\">\r\n            <MessageForm {...props} chatId = {activeChat}/>\r\n        </div>\r\n\r\n    </div>\r\n);\r\n}\r\n\r\nexport default ChatFeed;","import {useState} from 'react';\r\nimport axios from 'axios';\r\n\r\n\r\nconst LoginForm = (event) =>{\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [error, setError]  = useState('');\r\n\r\n    const HandleSubmit = async (e) => {\r\n    e.preventDefault();\r\n    \r\n    \r\n    // if that works out ->we are logged in \r\n    \r\n   \r\n    const authObject = { 'Project-ID':\"77ae9519-2465-4b19-a86b-48cc624bf656\", 'User-Name':username,'User-Secret': password};\r\n\r\n    try {\r\n        // username/ password = >chategine->gives messages\r\n      await  axios.get('https://api.chatengine.io/chats', { headers:authObject});\r\n      \r\n      \r\n      localStorage.setItem('username',username);\r\n      localStorage.setItem('password',password);\r\n      window.location.reload();//we are reloading s that when we ome second time the page acts differently and doesnt ask for sign in credentials\r\n\r\n\r\n\r\n\r\n    } catch (error) {\r\n         //error->try with new username\r\n         setError('Sorry, But the redentials you have added dont match, Please try again:)');\r\n\r\n    }\r\n\r\n\r\n    }\r\n\r\nreturn (\r\n\r\n    <div className=\"wrapper\">\r\n        <div className=\"form\">\r\n        <h1 className=\"title\">Demo</h1>\r\n        <form onSubmit ={HandleSubmit}>\r\n            <input type=\"text\" value={username}  onChange={(e) => setUsername(e.target.value)} className=\"input\" placeholder=\"Username\" required/>\r\n            <input type=\"password\" value={password}  onChange={(e) => setPassword(e.target.value)} className=\"input\" placeholder=\"Password\" required/>\r\n        <div align=\"center\">\r\n            <button type=\"submit\" className=\"button\">\r\n                <span>Start the Demo</span>\r\n            </button>\r\n        </div>\r\n        <h2 className=\"error\">\r\n        {error}\r\n        </h2>\r\n        </form>\r\n\r\n        </div>\r\n    </div>\r\n\r\n\r\n);\r\n}\r\nexport default LoginForm;","import React from 'react';\r\nimport { ChatEngine } from 'react-chat-engine';\r\nimport './App.css';\r\nimport  ChatFeed from \"./components/ChatFeed\";\r\nimport  LoginForm from \"./components/LoginForm\";\r\n\r\n\r\nconst App=()=>{\r\n    if(!localStorage.getItem('username')) return <LoginForm />\r\n    return (\r\n\r\n        <ChatEngine\r\n\r\n        height=\"100vh\"\r\n        projectID=\"77ae9519-2465-4b19-a86b-48cc624bf656\"\r\n        userName=\"Vedant\"\r\n        userSecret=\"123123\"\r\n        renderChatFeed = {(chatAppProps)=><ChatFeed {...chatAppProps} />}\r\n    />\r\n\r\n    );\r\n   }\r\nexport default App;\r\n ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}